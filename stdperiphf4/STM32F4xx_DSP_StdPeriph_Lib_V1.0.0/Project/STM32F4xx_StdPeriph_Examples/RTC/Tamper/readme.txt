/**
  @page RTC_Tamper RTC Tamper example
  
  @verbatim
  ******************** (C) COPYRIGHT 2011 STMicroelectronics *******************
  * @file    RTC/Tamper/readme.txt 
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    30-September-2011
  * @brief   Description of the RTC Tamper example.
  ******************************************************************************
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  ******************************************************************************
   @endverbatim

@par Example Description 

This example shows how to write/read data to/from RTC Backup data registers and 
demonstrates the Tamper detection feature.

One from the following clock can be used as RTC clock source (uncomment the
corresponding define in main.c):
  - LSE oscillator clock usually delivered by a 32.768 kHz quartz.
  - LSI oscillator clock

The associated firmware performs the following:
1. It configures the RTC_AF1 pin Tamper to be falling edge, and enables the Tamper 
   interrupt.
2. It writes the data to all RTC Backup data registers, then check whether the 
   data were correctly written. If yes, LED1 turns on, otherwise LED3 turns on.
3. On applying a low level on the RTC_AF1 pin (PC.13), the RTC backup data registers
   are reset and the Tamper interrupt is generated. The corresponding ISR then checks
   whether the RTC Backup data registers are cleared. If yes LED2 turns ON,
   otherwise LED4 turns ON.

 
@par Directory contents 

  - RTC/Tamper/system_stm32f4xx.c   STM32F4xx system clock configuration file
  - RTC/Tamper/stm32f4xx_conf.h     Library Configuration file
  - RTC/Tamper/stm32f4xx_it.c       Interrupt handlers
  - RTC/Tamper/stm32f4xx_it.h       Header for stm32f4xx_it.c
  - RTC/Tamper/main.c               Main program
  - RTC/Tamper/main.h               Main header file

@note The "system_stm32f4xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F4xx_Clock_Configuration_V1.0.0.xls" 
      provided with the AN3988 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>

      
@par Hardware and Software environment 

  - This example runs on STM32F4xx Devices.
  
  - This example has been tested with STM324xG-EVAL RevB and can be easily tailored
    to any other development board. 

  - STM324xG-EVAL Set-up
    - Use LD1, LD2, LD3 and LD4 leds connected respectively to PG.06, PG.08, PI.09 
      and PC.07 pins.
    - Use the TAMPER push button connected to PC.13 pin (EXTI Line13).

       
@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F4xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example
    
 * <h3><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h3>
 */
