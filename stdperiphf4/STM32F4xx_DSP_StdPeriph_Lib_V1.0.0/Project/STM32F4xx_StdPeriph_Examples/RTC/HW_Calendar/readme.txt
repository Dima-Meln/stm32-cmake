/**
  @page HW_Calendar RTC Hardware Calendar example
  
  @verbatim
  ******************** (C) COPYRIGHT 2011 STMicroelectronics *******************
  * @file    RTC/HW_Calendar/readme.txt 
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    30-September-2011
  * @brief   Description of the RTC Hardware Calendar example.
  ******************************************************************************
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  ******************************************************************************
   @endverbatim

@par Example Description 

This example demonstrates and explains how to use the RTC peripheral.
As an application example, it demonstrates how to setup the RTC peripheral, in 
terms of prescaler and interrupts, to be used to keep time and to generate 
alarm interrupt. 

One from the following clock can be used as RTC clock source (uncomment the
corresponding define in main.c): 
  - LSE oscillator clock usually delivered by a 32.768 kHz quartz.
  - LSI oscillator clock
  
The RTC is in the backup (BKP) domain, still powered by VBAT when VDD is switched off,
so the RTC configuration is not lost if a battery is connected to the VBAT pin. 
A key value is written in backup data register 0 to indicate if the RTC is already
configured.

The program behaves as follows:

1. After startup the program checks the backup data register 0 value:
    - BKP_DR0 value not correct: (RTC_BKP_DR0 value is not correct or has not yet
      been programmed when the program is executed for the first time) the RTC is
      configured and the user is asked to set the time and alarm (entered on 
      HyperTerminal).
    
    - BKP_DR0 value correct: this means that the RTC is configured and the time
      and Alarm A are displayed on HyperTerminal.

2. When an External Reset occurs the BKP domain is not reset and the RTC configuration
   is not lost.

3. When power on reset occurs:
    - If a battery is connected to the VBAT pin: the BKP domain is not reset and
      the RTC configuration is not lost.
      
    - If no battery is connected to the VBAT pin: the BKP domain is reset and the
      RTC configuration is lost.

4. When an RTC Alarm A event occurs the RTC Alarm interrupt is generated and the
   LED1 is toggled.
   
The example uses HyperTerminal to configure the RTC clock and display the current time:
 - When Tamper button is pressed, a menu is displayed to configure the RTC Time 
   and Alarm A registers.
 - When Key button is pressed, the current time is displayed.
 - When WakeUp button is pressed, the current alarm A is displayed. 

LED2 is truned ON when the RTC configuration is done correctly.

 
@par Directory contents 

  - RTC/HW_Calendar/system_stm32f4xx.c   STM32F4xx system clock configuration file
  - RTC/HW_Calendar/stm32f4xx_conf.h     Library Configuration file
  - RTC/HW_Calendar/stm32f4xx_it.c       Interrupt handlers
  - RTC/HW_Calendar/stm32f4xx_it.h       Header for stm32f4xx_it.c
  - RTC/HW_Calendar/main.c               Main program
  - RTC/HW_Calendar/main.h               Main header file

@note The "system_stm32f4xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F4xx_Clock_Configuration_V1.0.0.xls" 
      provided with the AN3988 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>

      
@par Hardware and Software environment 

  - This example runs on STM32F4xx Devices.
  
  - This example has been tested with STM324xG-EVAL RevB and can be easily tailored
    to any other development board. 

  - STM324xG-EVAL Set-up
    - Use LED1 led connected respectively to PG.06 pins.
    - Use the TAMPER push button connected to PC.13 pin (EXTI Line13).
    - Use the KEY push button connected to PG.15 pin (EXTI Line15).
    - Use the WAKEUP push button connected to PA.00 pin (EXTI Line0).
    - Make sure that jumper JP19 is in position 2-3 to connect the 3V battery to VBAT pin
    - Connect a null-modem female/female RS232 cable between the DB9 connector 
      CN16 (USART3) and PC serial port if you want to display data on the HyperTerminal.
 @note Make sure that jumper JP22 is in position 1-2
      
  - Hyperterminal configuration:
    - Word Length = 8 Bits
    - One Stop Bit
    - No parity
    - BaudRate = 115200 baud
    - flow control: None

       
@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F4xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example
    
 * <h3><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h3>
 */
