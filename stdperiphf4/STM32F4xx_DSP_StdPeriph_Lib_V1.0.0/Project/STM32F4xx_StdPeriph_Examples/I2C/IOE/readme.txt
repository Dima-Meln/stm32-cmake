/**
  @page I2C_IOE  Example on how to use the IO Expander
  
  @verbatim
  ******************** (C) COPYRIGHT 2011 STMicroelectronics *******************
  * @file    I2C/IOE/readme.txt 
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    30-September-2011
  * @brief   Description of the I2C IOExpander example.
  ******************************************************************************
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  ******************************************************************************
   @endverbatim

@par Example Description 

This firmware provides an example of configuring and using the IO Expander STMPE811 
in order to control input Joystick IOs, output IOs and the Touch Screen feature.
This example provides the elementary steps to control the following modules and
use them in an application:
The IO pins are used for:
  - Getting Joystick pins status (Polling and interrupt) only for STM3210C-EVAL.
  - The Touch Screen controller is used to get the Touched area detection information
    in a single point mode (Polling and interrupt).
    
The input information can be used either in Polling mode (uncomment the define
#define IOE_POLLING_MODE) or in Interrupt mode (uncomment the define #define
IOE_INTERRUPT_MODE). These defines are in main.h file.

After configuring the IO Expander modules and Interrupts (if needed), the output
IOs are set to their default state. These operations are done by the functions: 
IOE_Config() and IOE_ITConfig(). If the IO Expander is not operational (or the 
I2C pins are not in the correct level) the IOE_Config() function returns a value
different from 0 and a message is displayed on the LCD screen.

To get the status of an input:
 - IOE_JoyStickGetState() function is used for Joystick and returns a JOY_State_TypeDef
    value indicating the currently pressed key. This information is used to update 
    the LCD display (the Joystick pressed key name is displayed).
 - IOE_TS_GetState() function is used for Touch Screen and returns a pointer to 
    a structure holding the Touch Screen status (did a Touch Detection happened, 
    X, Y, and Z positions). Only detection into the drawn rectangles areas is 
    considered and used to update the LEDs status and LCD display (corresponding  
    LED turned ON when its rectangle is touched, and the LED name is displayed on
    the LCD screen).

Besides, the examples checks the status of the other Push-Buttons implemented on
the board (Key, Tamper and WakeUp push-buttons). They are checked in parallel 
with the IO Expander IOs and the LCD display and LEDs are updated according to 
the push buttons state. 


@par Directory contents 

  - I2C/IOE/system_stm32f4xx.c   STM32F4xx system clock configuration file
  - I2C/IOE/stm32f4xx_conf.h     Library Configuration file
  - I2C/IOE/stm32f4xx_it.c       Interrupt handlers
  - I2C/IOE/stm32f4xx_it.h       Interrupt handlers header file
  - I2C/IOE/main.c               Main program

@note The "system_stm32f4xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F4xx_Clock_Configuration_V1.0.0.xls" 
      provided with the AN3988 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>
 
      
@par Hardware and Software environment 

  - This example runs on STM32F4xx Devices.
  
  - This example has been tested with STM324xG-EVAL RevB (with no 
   additional hardware), and can be easily tailored to any other development board.


@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F4xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example

 * <h3><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h3>
 */
