/**
  @page NVIC_VectorTable_Relocation NVIC Vector Table Relocation example
  
  @verbatim
  ******************** (C) COPYRIGHT 2011 STMicroelectronics *******************
  * @file    NVIC/VectorTable_Relocation/readme.txt 
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    30-September-2011
  * @brief   Description of the NVIC Vector Table Relocation example.
  ******************************************************************************
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  ******************************************************************************
   @endverbatim

@par Example Description 

This example describes how to relocate the CortexM4 vector table in a specific 
address other than the default Flash memory base address.
This can be used to build program which will be loaded into Flash memory by an
application previously programmed from the Flash memory base address. 
Such application can be In-Application Programming (IAP) through USART, Ethernet
or USB (Device Firmware Upgrade, DFU).
These applications are available for download from the ST microcontrollers 
website: <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>

To build such application, some special configuration has to be performed:
1. Set the application load address, using your toolchain linker file
2. In the application code, relocate the vector table at the application load 
   address using the "NVIC_SetVectorTable" function from the misc.h/.c driver or
   by modifying the value of the constant "VECT_TAB_OFFSET" defined
   in system_stm32f4xx.c file. 
For example, when building an application to be loaded with the IAP through USART
the application load address and vector table address must be set to 0x08004000.

In this example, the associated program implements a "Delay" function based on
SysTick end of count interrupt, and toggles four leds with timing defined by the
"Delay" function.


@par Directory contents 

  - NVIC/VectorTable_Relocation/stm32f4xx_conf.h    Library Configuration file
  - NVIC/VectorTable_Relocation/stm32f4xx_it.c       Interrupt handlers
  - NVIC/VectorTable_Relocation/stm32f4xx_it.h      Interrupt handlers header file
  - NVIC/VectorTable_Relocation/main.c              Main program
  - NVIC/VectorTable_Relocation/system_stm32f4xx.c  STM32F4xx system source file

@note The "system_stm32f4xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F4xx_Clock_Configuration_V1.0.0.xls" 
      provided with the AN3988 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>


@par Hardware and Software environment

  - This example runs on STM32F4xx Devices.
  
  - This example has been tested with STM324xG-EVAL RevB and can be easily 
    tailored to any other development board.

  - STM324xG-EVAL Set-up
    - Use LED1, LED2, LED3 and LED4 connected respectively to PG.06, PG.08, PI.09
      and PC.07 pins


@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F4xx_StdPeriph_Templates
 - Open your preferred toolchain and setup your project configuration as follows
<ul>
    <li> MDK-ARM
         - In the project option menu, select 'Target' window and enter 0x08004000 
           as IROM1 start address
         - In the project option menu, select 'Linker' window and enter 0x08004000 
           as R/O base address

    <li> EWARM
         - Use "stm32f4xx_flash_offset.icf" as linker file

    <li> RIDE          
         - In the Application options -> script menu, set "Use Default Script File" 
           to "No" and use "stm32f4xx_flash_offset.ld" as Script File. 
           This linker is configured for STM32F4xx. It should be updated to use it
           with other STM32 devices. 
           
    <li> TASKING
         -In the project properties window, select C/C++ Build->settings node then 
         the  "Linker->Script file"  and use "stm32f4xx_flash_offset.lsl" as Script File.
         This linker is configured for STM32F4xx. It should be updated to be used
         with other STM32 devices. 

    <li> TrueSTUDIO 
         - In the project properties window, select C/C++ Build->settings node then 
           the C Linker->General node and use "stm32f4xx_flash_offset.ld" as Script File.
           This linker is configured for STM32F4xx. It should be updated to be used
           with other STM32 devices. 
          
</ul> 

 - Rebuild all files and load your image into target memory
 - Run the example
    
 * <h3><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h3>
 */
