/**
  @page DualADC_RegulSimu_DMAmode1  Use ADC1 and ADC2 in Dual regular simultaneous mode and DMA mode1

  @verbatim
  ******************** (C) COPYRIGHT 2011 STMicroelectronics *******************
  * @file    ADC/DualADC_RegulSimu_DMAmode1/readme.txt
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    30-September-2011
  * @brief   Description of the Dual regular simultaneous mode and DMA mode1
             Example
  ******************************************************************************
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  ******************************************************************************
   @endverbatim

@par Example Description 

This example provides a short description of how to use the ADC peripheral to
convert regular channels simultaneously in dual mode using DMA in mode 1.

Regular simultaneous mode is performed on a regular group of channels. 
In Dual ADC mode, ADC1 data are transferred on the first request, ADC2 data are
transferred on the second request and so on.
On each DMA request (one data item is available), a half-word representing an
ADC-converted data item is transferred.
The conversion is triggered by software.

The ADC1 is configured to convert ADC Channel 10 and 11.
The ADC2 is configured to convert ADC Channel 11 and 12.

Note: the sequence length must be the same for both ADCs

In this example, the system clock is 144MHz, APB2 =72MHz and ADC clock = APB2 /2.
So ADCCLK= 36MHz 

Conversion rate of channel 10 and 12 = 30 cycles => Conversion Time = 36M/30cyc = 1.2Msps.
Conversion rate of channel 11 = 15 cycles => Conversion Time = 36M/15cyc = 2.4Msps.

@note Refer to "simulation.xls" file to have the diagram simulation of the example.


@par Directory contents 

  - ADC/DualADC_RegulSimu_DMAmode1/system_stm32f4xx.c   STM32F4xx system clock configuration file
  - ADC/DualADC_RegulSimu_DMAmode1/stm32f4xx_conf.h     Library Configuration file
  - ADC/DualADC_RegulSimu_DMAmode1/stm32f4xx_it.h       Interrupt handlers header file
  - ADC/DualADC_RegulSimu_DMAmode1/stm32f4xx_it.c       Interrupt handlers
  - ADC/DualADC_RegulSimu_DMAmode1/main.c               Main program


@note The "system_stm32f4xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F4xx_Clock_Configuration_V1.0.0.xls" 
      provided with the AN3988 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>  


@par Hardware and Software environment 

  - This example runs on STM32F4xx Devices.

  - This example has been tested with STM324xG-EVAL RevB and can be easily tailored
    to any other development board.

  - STM324xG-EVAL Set-up 
    - Connect PC.0, PC.1 and PC.2 to a power supply (do not forget to connect the
      power supply GND to the EVAL board GND)


@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F4xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example
  
 * <h3><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h3>
 */
